import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter.scrolledtext import ScrolledText
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import json
from modules import compressaoHuffman as huff


class DataTransmissionGUI(ttk.Frame): # Classe principal para a GUI de transmiss√£o de dados
    """Classe que representa a interface gr√°fica para transmiss√£o de dados com compress√£o Huffman.
    Esta classe herda de ttk.Frame e cont√©m todos os componentes necess√°rios para a compress√£o e descompress√£o de dados usando o algoritmo de Huffman.
    A interface inclui campos para entrada de texto, exibi√ß√£o de c√≥digos gerados, √°rvore Huffman e bot√µes para compress√£o, descompress√£o e manipula√ß√£o de arquivos.
    Args:
        parent (tk.Tk): A janela principal onde a GUI ser√° exibida.
    """
    def __init__(self, parent): # M√©todo construtor da classe
        super().__init__(parent, padding=10) # Inicializa o frame com padding
        self.pack(fill=tk.BOTH, expand=True) # Preenche o espa√ßo dispon√≠vel na janela

        self.arvore_raiz = None # Vari√°vel para armazenar a raiz da √°rvore de Huffman

        # T√≠tulo
        ttk.Label(self, text="Transmiss√£o de Dados - Compress√£o Huffman",
                  font=("Segoe UI", 16, "bold")).pack(pady=(5, 15)) # Adiciona um t√≠tulo √† GUI com fonte personalizada

        # Notebook com abas
        notebook = ttk.Notebook(self) # Cria um notebook para organizar as abas
        notebook.pack(fill=tk.BOTH, expand=True, padx=5) # Adiciona o notebook √† GUI

        self._criar_abas(notebook) # Cria as abas do notebook
        self._criar_botoes_principais() # Cria os bot√µes principais para compress√£o e descompress√£o
        self._criar_botoes_arquivos() # Cria os bot√µes para manipula√ß√£o de arquivos

    # === ABAS ===
    def _criar_abas(self, notebook): # M√©todo para criar as abas do notebook
        self._criar_aba_mensagem(notebook) # Cria a aba para mensagem original e comprimida
        self._criar_aba_codigos(notebook) # Cria a aba para exibir os c√≥digos gerados
        self._criar_aba_arvore(notebook) # Cria a aba para exibir a √°rvore de Huffman
        self._criar_aba_entrada_manual(notebook) # Cria a aba para entrada manual de c√≥digos Huffman

    def _criar_aba_mensagem(self, notebook): # M√©todo para criar a aba de mensagem
        aba = ttk.Frame(notebook) # Cria uma nova aba no notebook
        notebook.add(aba, text="Mensagem") # Adiciona a aba ao notebook com o t√≠tulo "Mensagem"

        self._criar_rotulo("Mensagem a ser comprimida:", aba) # Cria um r√≥tulo para a mensagem original
        self.texto_original = self._criar_textbox(aba, height=4) # Cria uma caixa de texto para a mensagem original

        self._criar_rotulo("Texto comprimido (bin√°rio):", aba) # Cria um r√≥tulo para o texto comprimido
        self.texto_comprimido = self._criar_textbox(aba, height=4) # Cria uma caixa de texto para o texto comprimido

        self._criar_rotulo("Texto descomprimido:", aba) # Cria um r√≥tulo para o texto descomprimido
        self.texto_descomprimido = ttk.Label(aba, text="", wraplength=740, 
                                             font=("Segoe UI", 10), bootstyle="light") # Cria um r√≥tulo para exibir o texto descomprimido
        self.texto_descomprimido.pack(pady=(0, 10), anchor='w', padx=5) # Adiciona o r√≥tulo √† aba com padding e alinhamento

    def _criar_aba_codigos(self, notebook): # M√©todo para criar a aba de c√≥digos gerados
        """Cria a aba para exibir os c√≥digos gerados pelo algoritmo de Huffman."""
        aba = ttk.Frame(notebook) 
        notebook.add(aba, text="C√≥digos Gerados")

        self._criar_rotulo("C√≥digos Huffman:", aba)
        self.codigos_texto = self._criar_textbox(aba, height=10)

    def _criar_aba_arvore(self, notebook): # M√©todo para criar a aba da √°rvore de Huffman
        """Cria a aba para exibir a √°rvore de Huffman."""
        
        # Criar o frame da aba
        aba = ttk.Frame(notebook)
        
        notebook.add(aba, text="√Årvore Huffman")

        self._criar_rotulo("√Årvore de Huffman:", aba)
        self.arvore_texto = self._criar_textbox(aba, height=14)

    def _criar_aba_entrada_manual(self, notebook): # M√©todo para criar a aba de entrada manual de c√≥digos
        """Cria a aba para entrada manual de c√≥digos Huffman."""
        aba = ttk.Frame(notebook)
        notebook.add(aba, text="Entrada Manual")

        self._criar_rotulo("Inserir c√≥digos Huffman manualmente (ex: 'a' -> 01):", aba)
        self.codigos_personalizados = self._criar_textbox(aba, height=10)

    # === COMPONENTES ===
    def _criar_rotulo(self, texto, parent): # M√©todo auxiliar para criar r√≥tulos
        """Cria um r√≥tulo com o texto especificado."""
        ttk.Label(parent, text=texto, font=("Segoe UI", 10)).pack(anchor='w', pady=(10, 2), padx=5)

    def _criar_textbox(self, parent, height): # M√©todo auxiliar para criar caixas de texto
        """Cria uma caixa de texto com rolagem e configura√ß√µes espec√≠ficas."""
        caixa = ScrolledText(parent, height=height, width=90,
                             font=("Consolas", 10), wrap='none')
        caixa.pack(pady=(0, 10), padx=5, fill=tk.BOTH, expand=True)
        return caixa

    def _atualizar_textbox(self, caixa, texto): # M√©todo auxiliar para atualizar o conte√∫do de uma caixa de texto
        """Atualiza o conte√∫do de uma caixa de texto com o texto fornecido."""
        caixa.delete("1.0", tk.END)
        caixa.insert("1.0", texto)

    # === BOT√ïES ===
    def _criar_botoes_principais(self): # M√©todo para criar os bot√µes principais de compress√£o e descompress√£o
        """Cria os bot√µes principais para compress√£o e descompress√£o de dados."""
        frame = ttk.Frame(self)
        frame.pack(pady=10)
        ttk.Button(frame, text="Comprimir", bootstyle="success", command=self.comprimir).pack(side=tk.LEFT, padx=10)
        ttk.Button(frame, text="Descomprimir", bootstyle="info", command=self.descomprimir).pack(side=tk.LEFT, padx=10)

    def _criar_botoes_arquivos(self): # M√©todo para criar os bot√µes de manipula√ß√£o de arquivos
        """Cria os bot√µes para carregar c√≥digos de arquivo, salvar c√≥digos gerados e salvar √°rvore Huffman."""
        frame = ttk.Frame(self)
        frame.pack(pady=5)

        ttk.Button(frame, text="üìÇ Carregar C√≥digos de Arquivo", command=self.carregar_codigos_de_arquivo).pack(side=tk.LEFT, padx=10)
        ttk.Button(frame, text="üíæ Salvar C√≥digos Gerados", command=self.salvar_codigos_gerados).pack(side=tk.LEFT, padx=10)
        ttk.Button(frame, text="üíæ Salvar √Årvore Huffman", command=self.salvar_arvore_huffman).pack(side=tk.LEFT, padx=10)

    # === FUN√á√ïES PRINCIPAIS ===
    def comprimir(self): # M√©todo para comprimir o texto usando o algoritmo de Huffman
        """Comprime o texto inserido na caixa de texto original usando o algoritmo de Huffman."""
        texto = self.texto_original.get("1.0", tk.END).strip()
        if not texto: # Verifica se o texto est√° vazio
            self._atualizar_textbox(self.texto_comprimido, "[Erro] Mensagem vazia.")
            return

        binario, self.arvore_raiz = huff.codificar_huffman(texto) # Codifica o texto usando o algoritmo de Huffman

        self._atualizar_textbox(self.texto_comprimido, binario) # Atualiza a caixa de texto comprimido com o bin√°rio gerado
        self._atualizar_textbox(self.codigos_texto, huff.imprimir_codigos(self.arvore_raiz)) # Atualiza a caixa de texto com os c√≥digos gerados
        self._atualizar_textbox(self.arvore_texto, huff.imprimir_arvore(self.arvore_raiz)) # Atualiza a caixa de texto com a representa√ß√£o da √°rvore de Huffman
        self.texto_descomprimido.config(text="") # Limpa o r√≥tulo de texto descomprimido

    def descomprimir(self): # M√©todo para descomprimir o texto usando a √°rvore de Huffman
        """Descomprime o texto bin√°rio inserido na caixa de texto comprimido usando a √°rvore de Huffman."""
        binario = self.texto_comprimido.get("1.0", tk.END).strip() # Verifica se o texto comprimido est√° vazio
        if not binario: # Se o texto comprimido estiver vazio, exibe um erro
            self.texto_descomprimido.config(text="[Erro] Nenhum dado para descomprimir.")
            return

        arvore = self.arvore_raiz or self._reconstruir_arvore_dos_codigos(self._ler_codigos_personalizados()) # Reconstr√≥i a √°rvore de Huffman a partir dos c√≥digos personalizados, se a √°rvore raiz n√£o estiver definida

        if arvore is None: # Se a √°rvore n√£o puder ser reconstru√≠da, exibe um erro
            self.texto_descomprimido.config(text="[Erro] Nenhuma √°rvore ou c√≥digo v√°lido dispon√≠vel.")
            return

        try: # Tenta descomprimir o texto bin√°rio usando a √°rvore de Huffman
            texto = huff.decodificar_huffman(binario, arvore) # Descomprime o texto bin√°rio usando a √°rvore de Huffman
            self.texto_descomprimido.config(text=texto) # Atualiza o r√≥tulo de texto descomprimido com o texto resultante
        except Exception as e: # Se ocorrer um erro durante a descompress√£o, exibe uma mensagem de erro
            self.texto_descomprimido.config(text=f"[Erro ao decodificar]: {e}")

    # === MANIPULA√á√ÉO DE C√ìDIGOS ===
    def _ler_codigos_personalizados(self): # M√©todo para ler os c√≥digos personalizados inseridos pelo usu√°rio
        texto = self.codigos_personalizados.get("1.0", tk.END).strip() # Obt√©m o texto inserido na caixa de c√≥digos personalizados
        codigos = {} # Dicion√°rio para armazenar os c√≥digos personalizados
        for linha in texto.splitlines(): # Percorre cada linha do texto inserido
            if '->' in linha: # Verifica se a linha cont√©m o separador '->'
                try: # Tenta dividir a linha em caractere e c√≥digo
                    caractere, codigo = linha.strip().split('->') # Divide a linha em caractere e c√≥digo
                    caractere = caractere.strip().strip("'").strip('"') # Remove espa√ßos e aspas do caractere
                    codigos[caractere] = codigo.strip() # Adiciona o c√≥digo ao dicion√°rio de c√≥digos
                except Exception: # Se ocorrer um erro ao dividir a linha, ignora a linha
                    continue # Ignora linhas inv√°lidas
        return codigos # Retorna o dicion√°rio de c√≥digos personalizados

    def _reconstruir_arvore_dos_codigos(self, codigos_dict): # M√©todo para reconstruir a √°rvore de Huffman a partir dos c√≥digos personalizados
        if not codigos_dict: # Se o dicion√°rio de c√≥digos estiver vazio, retorna None
            return None # Se n√£o houver c√≥digos personalizados, n√£o h√° √°rvore para reconstruir
        raiz = huff.NoHuffman() # Cria a raiz da √°rvore de Huffman
        for caractere, codigo in codigos_dict.items(): # Percorre cada caractere e seu c√≥digo no dicion√°rio de c√≥digos personalizados
            no = raiz # Come√ßa na raiz da √°rvore
            for bit in codigo: # Percorre cada bit do c√≥digo
                if bit == '0': # Se o bit for '0', move para o filho esquerdo
                    if not no.esquerda: # Se n√£o houver filho esquerdo, cria um novo n√≥
                        no.esquerda = huff.NoHuffman() # Cria um novo n√≥ para o filho esquerdo
                    no = no.esquerda # Move para o filho esquerdo
                elif bit == '1': # Se o bit for '1', move para o filho direito
                    if not no.direita: # Se n√£o houver filho direito, cria um novo n√≥
                        no.direita = huff.NoHuffman() # Cria um novo n√≥ para o filho direito
                    no = no.direita # Move para o filho direito
            no.caractere = caractere # Define o caractere no n√≥ atual como o caractere correspondente ao c√≥digo
        return raiz # Retorna a raiz da √°rvore de Huffman reconstru√≠da a partir dos c√≥digos personalizados

    # === ARQUIVOS ===
    def carregar_codigos_de_arquivo(self): # M√©todo para carregar c√≥digos Huffman de um arquivo
        caminho = filedialog.askopenfilename( 
            title="Selecionar arquivo de c√≥digos",
            filetypes=[("Arquivos de texto", "*.txt"), ("Arquivos JSON", "*.json")]
        ) # Abre um di√°logo para selecionar o arquivo de c√≥digos Huffman
        if not caminho: # Se nenhum arquivo for selecionado, n√£o faz nada
            return

        try: # Tenta ler o arquivo selecionado
            with open(caminho, 'r', encoding='utf-8') as f: # Abre o arquivo para leitura
                if caminho.endswith('.json'): # Se o arquivo for JSON, carrega os c√≥digos como um dicion√°rio
                    codigos_dict = json.load(f) # Converte o JSON em um dicion√°rio
                    texto = '\n'.join(f"'{k}' -> {v}" for k, v in codigos_dict.items()) # Formata o dicion√°rio em uma string para exibi√ß√£o
                else: # Se o arquivo for de texto, l√™ o conte√∫do diretamente
                    texto = f.read() # L√™ o conte√∫do do arquivo de texto
            self._atualizar_textbox(self.codigos_personalizados, texto) # Atualiza a caixa de texto com os c√≥digos lidos do arquivo
            messagebox.showinfo("C√≥digos carregados", "C√≥digos Huffman carregados com sucesso.") # Exibe uma mensagem de sucesso ap√≥s carregar os c√≥digos
        except Exception as e: # Se ocorrer um erro ao ler o arquivo, exibe uma mensagem de erro
            messagebox.showerror("Erro ao carregar", f"Erro ao ler arquivo: {e}") # Exibe uma mensagem de erro se n√£o for poss√≠vel ler o arquivo

    def salvar_codigos_gerados(self): # M√©todo para salvar os c√≥digos gerados em um arquivo
        texto = self.codigos_texto.get("1.0", tk.END).strip() # Obt√©m o texto dos c√≥digos gerados
        if not texto: # Se n√£o houver c√≥digos gerados, exibe um aviso
            messagebox.showwarning("Aviso", "Nenhum c√≥digo gerado para salvar.") # Se n√£o houver c√≥digos gerados, n√£o h√° nada para salvar
            return # Se n√£o houver c√≥digos gerados, n√£o h√° nada para salvar

        caminho = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Arquivo texto", "*.txt")],
            title="Salvar c√≥digos Huffman"
        ) # Abre um di√°logo para salvar os c√≥digos gerados
        if caminho: # Se um caminho for selecionado, salva os c√≥digos no arquivo
            with open(caminho, "w", encoding="utf-8") as f:
                f.write(texto) # Escreve os c√≥digos gerados no arquivo selecionado
            # Exibe uma mensagem de sucesso ap√≥s salvar os c√≥digos
            messagebox.showinfo("Sucesso", f"C√≥digos salvos em:\n{caminho}")

    def salvar_arvore_huffman(self): # M√©todo para salvar a √°rvore de Huffman em um arquivo
        texto = self.arvore_texto.get("1.0", tk.END).strip() # Obt√©m o texto da √°rvore de Huffman
        if not texto: # Se n√£o houver √°rvore gerada, exibe um aviso
            # Se n√£o houver √°rvore gerada, n√£o h√° nada para salvar
            messagebox.showwarning("Aviso", "Nenhuma √°rvore de Huffman gerada para salvar.")
            return # Se n√£o houver √°rvore gerada, n√£o h√° nada para salvar

        caminho = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Arquivo texto", "*.txt")],
            title="Salvar √°rvore de Huffman"
        ) # Abre um di√°logo para salvar a √°rvore de Huffman
        # Se um caminho for selecionado, salva a √°rvore no arquivo
        if caminho:
            with open(caminho, "w", encoding="utf-8") as f:
                f.write(texto) # Escreve a √°rvore de Huffman no arquivo selecionado
            # Exibe uma mensagem de sucesso ap√≥s salvar a √°rvore
            messagebox.showinfo("Sucesso", f"√Årvore salva em:\n{caminho}")
